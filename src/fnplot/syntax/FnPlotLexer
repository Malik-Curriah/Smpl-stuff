package fnplot.syntax;

/* Specification for ArithExp tokens */

// user customisations
import java_cup.runtime.*;

// Jlex directives
%%
    
%cup
%public

%class FnPlotLexer

%type java_cup.runtime.Symbol

%eofval{
	return new Symbol(sym.EOF);
%eofval}

%eofclose	false

%char
%line

%{
    public int getChar() {
	return yychar + 1;
    }

    public int getColumn() {
    	return yycolumn + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }
%}

nl = [\n\r]

cc = ([\b\f]|{nl})

ws = {cc}|[\t ]

alpha = [a-zA-Z_]

num = [0-9]

alphanum = {alpha}|{num}

%%

<YYINITIAL>	{nl}	{yycolumn = 0;}
<YYINITIAL>	{ws} {}

<YYINITIAL>	"+"	{return new Symbol(sym.PLUS);}
<YYINITIAL>	"-"	{return new Symbol(sym.MINUS);}
<YYINITIAL>	"*"	{return new Symbol(sym.MUL);}
<YYINITIAL>	"/"	{return new Symbol(sym.DIV);}
<YYINITIAL>	"%"	{return new Symbol(sym.MOD);}
<YYINITIAL>	":=" {return new Symbol(sym.ASSIGN);}
<YYINITIAL> "^" {return new Symbol(sym.EXP);}
<YYINITIAL> "&" {return new Symbol(sym.BAND);}
<YYINITIAL> "|" {return new Symbol(sym.BOR);}
<YYINITIAL> "~" {return new Symbol(sym.BNOT);}
<YYINITIAL> "@" {return new Symbol(sym.CONCAT);}
<YYINITIAL> ">" {return new Symbol(sym.LTHAN);}
<YYINITIAL> "<" {return new Symbol(sym.GTHAN);}
<YYINITIAL> ">=" {return new Symbol(sym.EQGTHAN);}
<YYINITIAL> "<=" {return new Symbol(sym.EQLTHAN);}
<YYINITIAL> "!=" {return new Symbol(sym.NOTEQUAL);}
<YYINITIAL> "=" {return new Symbol(sym.EQUAL);}


<YYINITIAL>	"("	{return new Symbol(sym.LPAREN);}
<YYINITIAL>	")"	{return new Symbol(sym.RPAREN);}

<YYINITIAL>	"["	{return new Symbol(sym.LBRACE);}
<YYINITIAL>	"]"	{return new Symbol(sym.RBRACE);}

<YYINITIAL>	","	{return new Symbol(sym.COMMA);}

<YYINITIAL>	"let" {return new Symbol(sym.LET);}
<YYINITIAL>	"if" {return new Symbol(sym.IF);}
<YYINITIAL> "proc" {return new Symbol(sym.PROC);}
<YYINITIAL> "call" {return new Symbol(sym.CALL);}
<YYINITIAL> "def" {return new Symbol(sym.DEFINE);}
<YYINITIAL> "then" {return new Symbol(sym.THEN);}
<YYINITIAL> "else" {return new Symbol(sym.ELSE);}
<YYINITIAL> "case" {return new Symbol(sym.CASE);}

<YYINITIAL> "and" {return new Symbol(sym.AND);}
<YYINITIAL> "not" {return new Symbol(sym.NOT);}
<YYINITIAL> "or" {return new Symbol(sym.OR);}

<YYINITIAL>	";" {return new Symbol(sym.SEMI);}
<YYINITIAL> ":" {return new Symbol(sym.COLON);}



<YYINITIAL> {num}+ {return new Symbol(sym.INTEGER,new Integer(yytext()));}

<YYINITIAL> {num}*"\."{num}* {return new Symbol(sym.REAL, new Double(yytext()));}

<YYINITIAL> "#x"[0-9a-fA-F]+ {return new Symbol(sym.INTEGER, Integer.parseInt(yytext().substring(2),16));}

<YYINITIAL> "#b"("0"|"1")+ {return new Symbol(sym.INTEGER, Integer.parseInt(yytext().substring(2),2));}

<YYINITIAL> "#c"[^\r\n] {return new Symbol(sym.CHAR, yytext().charAt(2));}

<YYINITIAL> "#e" {return new Symbol(sym.NIL);}

<YYINITIAL> "#u"[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F] {return new Symbol(sym.CHAR, yytext())}

<YYINITIAL> "#t" {return new Symbol(sym.BOOL, true);}

<YYINITIAL> "#f" {return new Symbol(sym.BOOL, false);}

<YYINITIAL> "\""[^\r\n]"\"" {return new Symbol(sym.STRING, yytext());}

<YYINITIAL> {alpha}{alphanum}* {return new Symbol(sym.VARIABLE, yytext());}
